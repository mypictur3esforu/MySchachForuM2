import javax.swing.*;
import java.awt.*;
public class UI {
    //first white, then black
    public static String[] uniPieces = new String[]{"♖","♘", "♗", "♕", "♔", "♜", "♞", "♝", "♛", "♚", "none"};
    public static String[] pawns = new String[]{"♙", "♟"};
    public static int moveOrder= 0, isOnSquare, moveToSquare;
    public static JPanel field = new JPanel(new GridLayout(8,8));
    public static JFrame frame = new JFrame();

    public static void main(String[] args) {
        Court.BordDefinition();
        CreateUI();
    }
    public static void CreateUI(){
        //JPanel field = new JPanel(new GridLayout(8,8));
        JPanel sidebar = new JPanel();
        UpdateUI();
        frame.add(field);
        //frame.add(sidebar);
        frame.pack();
        frame.setSize(500, 500);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    public static void UpdateUI(){
        field.removeAll();
        String colour = "black";
        for (int i = 0; i < 64; i++) {
            JButton buttons = new JButton(ButtonDefinition(i));
            buttons.setFont(new Font(buttons.getFont().getFontName(), Font.PLAIN, 25));
            colour = SwitchColor(colour);
            if (i % 8 == 0 && i != 0) {
                System.out.println(i);
                colour = SwitchColor(colour);
                System.out.println(colour);
            }
            //System.out.println("Button: "+colour);
            if (colour.equals("white")) {
                buttons.setBackground(Color.white);
            }else{
                buttons.setBackground(Color.black);
            }
            int finalI = i;
            buttons.addActionListener(ev -> {
                ButtonPressed(finalI);
            });
            field.add(buttons);
        }
        frame.add(field);
    }

    public static void ButtonPressed(int buttonNumber){
        //System.out.println(buttonNumber);
        ComprehendMoveOrder.MoveOrderOrganizer(buttonNumber);
    }

    static String SwitchColor(String colour){
        if (colour.isBlank()) {
            return "black";
        }
        if (colour.equals("white")) {
            return "black";
        }else{
            return "white";
        }
    }

    public static String ButtonDefinition(int buttonNumber){
        int pieceNumber;
        String[] fieldValue = new String[3];
        System.arraycopy(Court.court[buttonNumber].split(""), 0, fieldValue, 0, Court.court[buttonNumber].split("").length);
        if (fieldValue[0].equals("b")) {
            pieceNumber = 5;
        }else{
            pieceNumber = 0;
        }
        if (fieldValue[0].equals("0")) {
            return "";
        }
        switch (fieldValue[1]){
            case "P" -> {if(pieceNumber != 0)pieceNumber = 1;}
            case "R" -> pieceNumber += 0;
            case "N" -> pieceNumber += 1;
            case "B" -> pieceNumber += 2;
            case "Q" -> pieceNumber += 3;
            case "K" -> pieceNumber += 4;
            case null -> pieceNumber = 10;
            default -> pieceNumber = 10;
        }
        if (fieldValue[1].equals("P")) {
            return pawns[pieceNumber];
        }else if(!fieldValue[1].isEmpty()){
            return uniPieces[pieceNumber];
        }
        return "";
    }
}
