import javax.swing.*;
import java.awt.*;


public class UI {
    //first white, then black
    public static String[] uniPieces = new String[]{"♖","♘", "♗", "♕", "♔", "♜", "♞", "♝", "♛", "♚", "none"};
    public static String[] pawns = new String[]{"♙", "♟"};
    public static JFrame frame = new JFrame();
    public static JPanel field = new JPanel(new GridLayout(8,8)), sidebar = new JPanel(new GridLayout(3, 1));
    public static JButton[] buttons = new JButton[64], buttonGames = new JButton[0];
    public static JPanel bigPanel = new JPanel(new GridLayout(1, 2  )), startScreen = new JPanel(new GridLayout(3, 1));
    public static JPanel games = new JPanel(new GridLayout(2,1)), higherLevelField = new JPanel();
    static String color = "black";
    public static Color black, white, savingColor = new Color(0xFFEBBDFD, true);
    public static JButton startButton, winner, settings, archive, saveBord;
    public static JButton loadBord;

    //Stack Overflow
    public static Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public static int screenWidth =  screenSize.width;
    public static int screenHeight = screenSize.height;

    static Dimension minimum = new Dimension(500, 500);

    public static void main(String[] args) {
        System.out.println("Hallo");
        Court.BordDefinition();
        //Court.TestBordDefinition();
        SafeLoadBoard.CheckForMainFile();
        CreateUI();
        CreateStartScreen();
    }

    public static void CreateUI(){
        //CreateSideBar();
        String colour = "black";
        for (int i = 0; i < 64; i++) {
            JButton button = new JButton(ButtonDefinition(i));
            button.setFont(new Font(button.getFont().getFontName(), Font.PLAIN, 25));
            button.setBackground(BackgroundColor(i));
            int finalI = i;
            button.addActionListener(ev -> {
                ButtonPressed(finalI);
            });
            button.setPreferredSize(new Dimension(60,60));
            button.setMaximumSize( new Dimension(60, 60));
            buttons[i] = button;
           // System.out.println(Arrays.toString(buttons));
            field.add(button);
        }
        //frame.add(field);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        Scale();
    }

    public static void UpdateUI(){
        color = "black";
        for (int i = 0; i < buttons.length; i++) {
            //System.out.println(i +"\n" + Arrays.toString(buttons));
            buttons[i].setText(ButtonDefinition(i));
            buttons[i].setBackground(BackgroundColor(i));
        }
        if (ComprehendMoveOrder.isOnSquare != -1) {
            for (int i = 0; i < GetPossibleMoves.possibleMoves.length; i++) {
                buttons[GetPossibleMoves.possibleMoves[i]].setBackground(new Color(88, 239, 152));
            }
        }
        if (ComprehendMoveOrder.isOnSquare != -1) {
            buttons[ComprehendMoveOrder.isOnSquare].setBackground(new Color(243, 109, 226));
        }
    }

    public static void ButtonPressed(int buttonNumber){
        //System.out.println(buttonNumber);
        ComprehendMoveOrder.MoveOrderOrganizer(buttonNumber);
    }

    static Color BackgroundColor(int buttonNumber){
        color= SwitchColor(color);
        if (buttonNumber % 8 == 0 && buttonNumber != 0) {
            //System.out.println(i);
            color = SwitchColor(color);
            //System.out.println(colour);
        }
        //System.out.println("Button: "+colour);
        if (color.equals("white")) {
            return white = new Color(236, 255, 255);
        }else{
            //return Color.lightGray;
            return black = new Color(18, 160, 177);
        }
    }

    static String SwitchColor(String colour){
        if (colour.isBlank()) {
            return "black";
        }
        if (colour.equals("white")) {
            return "black";
        }else{
            return "white";
        }
    }

    public static String ButtonDefinition(int buttonNumber){
        int pieceNumber;
        String[] fieldValue = new String[3];
        System.arraycopy(Court.court[buttonNumber].split(""), 0, fieldValue, 0, Court.court[buttonNumber].split("").length);
        if (fieldValue[0].equals("[")) {
            Court.court[buttonNumber] = fieldValue[1] + fieldValue[2];
            fieldValue[0] = fieldValue[1];
            fieldValue[1] = fieldValue[2];
        }
        if (fieldValue[0].equals("b")) {
            pieceNumber = 5;
        }else{
            pieceNumber = 0;
        }
        if (fieldValue[0].equals("0")) {
            return "";
        }
        switch (fieldValue[1]){
            case "P" -> {if(pieceNumber != 0)pieceNumber = 1;}
            case "R" -> pieceNumber += 0;
            case "N" -> pieceNumber += 1;
            case "B" -> pieceNumber += 2;
            case "Q" -> pieceNumber += 3;
            case "K" -> pieceNumber += 4;
            case null -> pieceNumber = 10;
            default -> pieceNumber = 10;
        }
        if (fieldValue[1].equals("P")) {
            return pawns[pieceNumber];
        }else if(!fieldValue[1].isEmpty()){
            return uniPieces[pieceNumber];
        }
        return "";
    }

    public static void CreateStartScreen(){
        startButton = new JButton("START");
        startButton.setFont(new Font("Serif", Font.PLAIN, 50));
        startButton.setBackground(new Color(0xFF40F4CB, true));
        startButton.setSize(400, 400);
        startButton.addActionListener(ev->{
            //StartEnd.StartGame();
            CreateGameScreen();
        });
        //frame.add(startButton);
        startScreen.add(startButton);
        frame.add(bigPanel);
        loadBord = new JButton("Load old game:");
        loadBord.addActionListener(ev->{
            loadBord.setText("Cklick on one of the buttons below!");
        });
        loadBord.setFont(new Font("Arial", Font.ITALIC, 50));
        loadBord.setForeground(Color.BLACK);
        loadBord.setBackground(savingColor);
        buttonGames = new JButton[SafeLoadBoard.filesSaved];
        games = new JPanel(new GridLayout(1, buttonGames.length));
        for (int i = 1; i <= SafeLoadBoard.filesSaved; i++) {
            JButton gameLoadButton = new JButton("Game " + i + " from " + SafeLoadBoard.GetGamesDate(i));
            gameLoadButton.setBackground(Color.gray);
            startScreen.add(gameLoadButton);
            buttonGames[i-1] = gameLoadButton;
            int finalI = i;
            gameLoadButton.addActionListener(e -> {
                SafeLoadBoard.LoadGame(finalI);
            });
            games.add(gameLoadButton);
        }
        //bigPanel.add(loadBord);
        startScreen.add(loadBord);
        startScreen.add(games);
        bigPanel.add(startScreen);
        frame.add(bigPanel);
    }

    public static void EndScreen(String colorWon){
        //frame.remove(UI.field);
        frame.removeAll();
        field.setVisible(false);
        winner = new JButton(colorWon);
        winner.addActionListener(ev -> {
            StartEnd.NewGame();
        });
        bigPanel.add(winner);
    }

    public static void CreateGameScreen(){
        UI.bigPanel.remove(UI.startScreen);
        //UI.CreateSideBar();
        higherLevelField.add(field);
        UI.bigPanel.add(UI.higherLevelField);
        UI.bigPanel.add(UI.sidebar);
        UI.bigPanel.setVisible(true);
        UI.frame.setVisible(true);
    }

    public static void Scale(){
        Dimension frameDimension = new Dimension(screenWidth, screenHeight);
//        if (screenHeight < screenWidth) {
//            frameDimension = new Dimension(screenHeight, screenHeight);
//        }
//        frame.setPreferredSize(frameDimension);
//        frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
//        frame.setMinimumSize(frameDimension);
        frame.setSize(frameDimension);
        int fieldSize = frame.getWidth();
        if (frame.getWidth() > frame.getHeight()) {
            fieldSize = frame.getHeight();
        }
        System.out.println("fielSize: " + fieldSize);
        field.setSize(fieldSize * 2, fieldSize);
        }

        public static void CreateSideBar(){
        settings = new JButton("Settings");
        settings.setBackground(new Color(0x0EE6E6));
        sidebar.add(settings);
        archive = new JButton("Archive");
        archive.setBackground(Color.PINK);
        sidebar.add(archive);
        saveBord = new JButton("Save Bord");
        saveBord.setBackground(savingColor);
        saveBord.addActionListener(ev->{
            SafeLoadBoard.SafeBord();
        });
        sidebar.add(saveBord);
        }
}
