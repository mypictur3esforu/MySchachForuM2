public class CheckMoves {
    public static int[] secondMover = new int[]{-1, -1};
    public static int[][] rooks = new int[][]{{0, 1000},{7, 1000}, {56, 1000}, {63, 1000}};
    //white goes first
    static boolean[] kingMoved = new boolean[]{false, false};
    static int fieldToSearch = -1;

    public static boolean CheckMove(int isOnSquare, int moveToSquare){
        if (!Usefull.GetColorOfSquaresPiece(isOnSquare, Court.court).equals(WhoseTurn.turn)) {
            System.out.println("It is " + WhoseTurn.turn + "´s turn!");
            return false;
        }
        if (isOnSquare == moveToSquare)return false;
        boolean temporary = true;
        switch (Usefull.GetSquaresPieceNotation(isOnSquare, Court.court)){
            case "R" -> {temporary = CheckColumRow(isOnSquare, moveToSquare); HandleRookMove(isOnSquare, temporary); }
            case "N" -> {temporary = CheckLMovement(isOnSquare, moveToSquare);}
            case "B" -> {temporary = CheckDiagonal(isOnSquare, moveToSquare);}
            case "Q" -> {temporary = CheckColumRow(isOnSquare, moveToSquare) || CheckDiagonal(isOnSquare, moveToSquare); }
            case "K" -> {temporary = CheckSurround(isOnSquare, moveToSquare) || CheckCastle(isOnSquare, moveToSquare);}
            case "P" -> {temporary = CheckPawn(isOnSquare, moveToSquare);}
        }
        if (!temporary /*|| !CheckIfPinned(isOnSquare, moveToSquare)*/) {
            return false;
        }
        String[] simulatedBord = Usefull.SimulateMove(isOnSquare, moveToSquare, Court.court);
        if (FindCheck.CheckForChecks(Usefull.GetKingsPosition(WhoseTurn.turn, simulatedBord), WhoseTurn.turn, simulatedBord )) {
            return false;
        }
        return CheckIfPieceCanBeTaken(isOnSquare, moveToSquare);
    }

    static boolean CheckIfPinned(int isOnSquare, int moveToSquare){
        //gib zurück, ob das Feld FindeColorKönigsPosition auf dem Brett, auf dem der Zug bereits gezogen wurde im Schach steht; zerstört das ganze Programm
        //return FindCheck.CheckForChecks(Usefull.GetKingsPosition(WhoseTurn.turn, Court.court), WhoseTurn.turn, Usefull.SimulateMove(isOnSquare, moveToSquare, Court.court));
        if (FindCheck.CheckForChecks(Usefull.GetKingsPosition(WhoseTurn.turn, Court.court), WhoseTurn.turn, Court.court)) {
            return true;
        }
        if (FindCheck.CheckForChecks(Usefull.GetKingsPosition(WhoseTurn.turn, Court.court), WhoseTurn.turn, Usefull.SimulateMove(isOnSquare, moveToSquare, Court.court))) {
            System.out.println("This piece is pinned and is not allowed to go there!");
            return false;
        }else return true;
    }

    static boolean CheckIfPieceCanBeTaken(int isOnSquare, int moveToSquare){
        if(Usefull.GetColorOfSquaresPiece(isOnSquare, Court.court).equals(Usefull.GetColorOfSquaresPiece(moveToSquare, Court.court))){
            System.out.println("You can not take your own pieces!");
            return false;
        }
        return true;
    }

    static void HandleRookMove(int isOnSquare, boolean moveLegal){
        if (!moveLegal) {
            return;
        }
        for (int i = 0; i < rooks.length; i++) {
            if (rooks[i][0] == isOnSquare) {
                rooks[i][1] = 0;
            }
        }
    }

    static boolean CheckColumRow(int isOnSquare, int moveToSquare){
        String movement = CheckIfColumOrRowMovement(isOnSquare, moveToSquare);
        if (movement.equals("false")) {
            System.out.println("The chosen piece is not allowed to go there! (" + movement + ")");
            return false;
        }
        if (movement.equals("row")) {
            if(!CheckIfPieceIsInBetween(isOnSquare, moveToSquare, 1)){
                return false;
            }
        }
        if (movement.equals("column")) {
            return CheckIfPieceIsInBetween(isOnSquare, moveToSquare, 8);
        }
        return true;
    }

    static String CheckIfColumOrRowMovement(int isOnSquare, int moveToSquare){
        int minimum = isOnSquare - (isOnSquare % 8), maximum = minimum + 7;
        if (moveToSquare >= minimum && moveToSquare <= maximum) {
            return "row";
        }
        if (Math.abs(moveToSquare - isOnSquare) % 8 == 0) {
            return "column";
        }
        return "false";
    }

    static boolean CheckDiagonal(int isOnSquare, int moveToSquare){
        //int steps = GetStepsDiagonals(isOnSquare, moveToSquare);
        if (!CheckLineJumps(isOnSquare, moveToSquare)) {
            return false;
        }
        int movement = CheckWhichDiagonal(isOnSquare, moveToSquare);
        if (movement == 0) {
            System.out.println("This piece is not able to go there! (diagonally)");
            return false;
        }
        return CheckIfPieceIsInBetween(isOnSquare, moveToSquare, movement);
    }

    static int GetStepsDiagonals(int isOnSquare, int moveTOSquare){
        int direction = 0;
        if (Math.abs(moveTOSquare - isOnSquare) % 9 == 0) {
            direction = 9;
        }else if (Math.abs(moveTOSquare - isOnSquare) % 7 == 0) {
            direction = 7;
        }
        if (isOnSquare > moveTOSquare) {
            direction *= -1;
        }
        return direction;
    }

    static int CheckWhichDiagonal(int isOnSquare, int moveToSquare){
        int movement = 1;
        /*if (isOnSquare > moveToSquare) {
            movement *= -1;
        }*/
        int substraction = Math.abs(moveToSquare - isOnSquare);
        if (substraction % 7 == 0 && substraction % 9 == 0) {
            return movement *9;
        }
        if (substraction % 7 == 0) {
            return movement * 7;
        }
        if (substraction % 9 == 0) {
            return movement * 9;
        }
        return 0;
    }

    public static boolean CheckLineJumps(int isOnSquare, int moveToSquare){
        int steps = GetStepsDiagonals(isOnSquare, moveToSquare);
        int end = moveToSquare;
        if (isOnSquare > moveToSquare) {
            end = isOnSquare + (isOnSquare - moveToSquare);
        }
        for (int i = 0; isOnSquare + i >= 0 && isOnSquare + i <= 63 && isOnSquare + i != moveToSquare; i += steps) {
            if (steps == 0) {break;}
            int oneForward = isOnSquare + i, twoForward = oneForward + steps;
            System.out.println(twoForward % 8);
            System.out.println(oneForward % 8);
            int difference = Math.abs((isOnSquare + i + steps) % 8 - (isOnSquare + i) % 8);
            if (difference > 1 || twoForward / 8 == oneForward / 8) {
                System.out.println("Bishops can not jump lines!");
                return false;
            }
        }
        return true;
    }

    static boolean CheckKnightLineJump(int isOnSquare, int moveToSquare){
        return Math.abs(moveToSquare % 8 - isOnSquare % 8) <= 2; // line jump true
    }

    static boolean CheckLMovement(int isOnSquare, int moveToSquare){
        int[] possibleSquares = new int[]{6, 10, 15, 17};
        int direction = 1;
        for (int z = 0; z <= 1; z++) {
            for (int i = 0; i < possibleSquares.length; i++) {
                if (isOnSquare + possibleSquares[i] * direction == moveToSquare) {
                    return CheckKnightLineJump(isOnSquare, moveToSquare);
                }
            }
            direction *= -1;
        }
        System.out.println("This Knight is not able to go to chosen square! (l movement)");
        return false;
    }

    static boolean CheckSurround(int isOnSquare, int moveToSquare){
        int[] possibleSquares = new int[]{1, 7, 8, 9};
        int direction = 1;
        for (int z = 0; z <= 1; z++) {
            for (int i = 0; i < possibleSquares.length; i++) {
                if (isOnSquare + possibleSquares[i] * direction == moveToSquare && !FindCheck.CheckForChecks(isOnSquare + possibleSquares[i] * direction, WhoseTurn.turn, Court.court)) {
                    //KingMoves();
                    return true;
                }
            }
            direction *= -1;
        }
        System.out.println("The King is not able to go to chosen square! (surround movement)");
        return false;
    }

    static void KingMoves(){
        if (!Usefull.GetSquaresPieceNotation(ComprehendMoveOrder.isOnSquare, Court.court).equals("K")) {
            return;
        }
        if (WhoseTurn.turn.equals("white")) {
            kingMoved[0] = true;
        }else if (WhoseTurn.turn.equals("black")) {
            kingMoved[1] = true;
        }
    }

    static boolean CheckCastle(int isOnSquare, int moveToSquare){
        int direction = 1;
        if (isOnSquare > moveToSquare) {
            direction *= -1;
        }
        if (Math.abs(moveToSquare - isOnSquare) != 2 || !CheckIfPieceIsInBetween(isOnSquare, moveToSquare, 1)){
            System.out.println("That is not how Castling works!");
            return false;
        }
        for (int i = 0; i <= 2; i++) {
            if (FindCheck.CheckForChecks(isOnSquare + (i * direction), WhoseTurn.turn, Court.court)) {
                System.out.println("You can not castle into checks!");
                return false;
            }
        }
        int position = 1;
        if (WhoseTurn.turn.equals("white")) {
            position = 0;
        }
        if (kingMoved[position]) {
            return false;
        }
        if(RookInPlace(isOnSquare, direction)){
            System.out.println("Castling allowed");
            secondMover[0] = fieldToSearch;
            secondMover[1] = moveToSquare - direction;
            //KingMoves();
            return true;
        }
        return false;
    }

    static boolean RookInPlace(int isOnSquare, int direction){
        int[] rookSquares = new int[]{0, 7, 56, 63};
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < rookSquares.length; j++) {
                if (isOnSquare + (i * direction) == rookSquares[j]) {
                    fieldToSearch = rookSquares[j];
                    break;
                }
            }
        }
        for (int i = 0; isOnSquare + (i * direction) != fieldToSearch + direction; i++) {
            String[] tempSquare = Usefull.CreateFieldValueArray(isOnSquare + ( i * direction), Court.court);
            if (tempSquare.length == 1) {
                continue;
            }
            //enhanced for Schleife
            for (int[] rook : rooks) {
                if (rook[0] == fieldToSearch) {
                    if (rook[1] != 1000) {
                        System.out.println("The rook has already moved! (castling: " + fieldToSearch + ")");
                        return false;
                    }
                }
            }
            if (fieldToSearch != isOnSquare + (3 * direction)) {
                if (!Usefull.CreateFieldValueArray(fieldToSearch-1, Court.court)[0].equals("0")) {
                    System.out.println("The rook can not jump over pieces! (castling: " + fieldToSearch + ")");
                    return false;
                }
            }
        }
        return true;
    }

    static boolean CheckPawn(int isOnSquare, int moveToSquare){
        if (!Court.court[moveToSquare].equals("0") && Math.abs(moveToSquare - isOnSquare) != 7 && Math.abs(moveToSquare-isOnSquare) != 9) {
            System.out.println("Pawns do not take like that!");
            return false;
        }
        int colorWay = 1;
        if (Usefull.GetColorOfSquaresPiece(isOnSquare, Court.court).equals("white")) {
            colorWay = -1;
        }
        int amountOfSquares = Math.abs(isOnSquare - moveToSquare);
        if (moveToSquare - isOnSquare == 8 * colorWay) {
            return true;
        }else if (amountOfSquares == 16) {
            return TwoSquares(isOnSquare, moveToSquare);
        }else if (amountOfSquares == 7 || amountOfSquares == 9) {
            return CheckPawnTake(isOnSquare , moveToSquare, colorWay);
        }
        return false;
    }

    private static boolean CheckPawnTake(int isOnSquare, int moveToSquare, int direction) {
        int rowOnSquare = isOnSquare / 8;
        int rowMoveToSquare = moveToSquare / 8;
        if (rowMoveToSquare - rowOnSquare != direction && moveToSquare != OtherOccurrences.enPassantSquare) {
            return false;
        }
        if (moveToSquare == OtherOccurrences.enPassantSquare) {
            secondMover = new int[]{OtherOccurrences.enPassantSquare - 8 * direction, -2};
            return true;
        }
        return !Court.court[moveToSquare].equals("0");
    }

    static boolean TwoSquares(int isOnSquare, int moveToSquare){
        int startRow = -1;
        if (Usefull.GetColorOfSquaresPiece(isOnSquare, Court.court).equals("white")) {
            startRow = 6;
        } else if (Usefull.GetColorOfSquaresPiece(isOnSquare, Court.court).equals("black")) {
            startRow = 1;
        }
        if ((isOnSquare / 8) != startRow) {
            System.out.println("The pawn can not go like that! (" + isOnSquare / 8 + ")");
            return false;
        }
        if (!Court.court[isOnSquare - (isOnSquare - moveToSquare)/2].equals("0")) {
            System.out.println("The pawn can not jump over pieces!");
            return false;
        }
        return true;
    }

    /*static boolean CheckIfPieceIsInBetween(int isOnSquare, int moveToSquare, int movement){
        if (isOnSquare > moveToSquare) {
            movement *= -1;
        }
        for (int i = isOnSquare + movement; isOnSquare != moveToSquare - movement; isOnSquare += movement) {
            if (!Court.court[i].equals("0")) {
                System.out.println("There is a piece in the way! Movement: " + movement + ". Square: " + isOnSquare);
                return false;
            }
        }
        return true;
    }*/

    static boolean CheckIfPieceIsInBetween(int isOnSquare, int moveToSquare, int movement){
        if (isOnSquare > moveToSquare) {
            movement *= -1;
        }
        for (int i = movement; isOnSquare + i != moveToSquare; i += movement) {
            if (!Court.court[isOnSquare + i].equals("0")) {
                System.out.println("This piece can not jump over other pieces!");
                return false;
            }
        }
        return true;
    }

}
