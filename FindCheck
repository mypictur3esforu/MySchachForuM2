import java.util.Arrays;

public class FindCheck {
    //if thereÂ´s a check method returns false
    public static int[] potentialChecks = new int[0], realChecks;

    public static boolean CheckForChecks(int square, String color){
        realChecks = new int[0];
        ColumnRowChecks(square, "row");
        ColumnRowChecks(square, "column");
        DiagonalCheck(square);
        LMovementCheck(square);
        System.out.println(Arrays.toString(potentialChecks));
        ColorCheck(color);
        return realChecks.length > 0;
    }

    static void ColorCheck(String color){
        for (int potentialCheck : potentialChecks) {
            if (!Usefull.GetColorOfSquaresPiece(potentialCheck).equals(color)) {
                realChecks = Usefull.AddToIntArray(potentialCheck, realChecks);
            }
        }
    }

    static boolean ColumnRowChecks(int square, String checkType) {
        boolean check = false;
        int direction = -1, minimum = -1, maximum = -1, checkFrom;
        if (checkType.equals("row")) {
            minimum = square - (square % 8);
            maximum = minimum + 7;
            direction = 1;
        } else if (checkType.equals("column")) {
            minimum = 0;
            maximum = 63;
            direction = 8;
        }
        while (true) {
            for (int i = 1; square + (i * direction) >= minimum && square + (i * direction) <= maximum; i++) {
                String piece = "";
                if (!Court.court[square + (i * direction)].equals("0")) {
                    piece = Usefull.GetSquaresPieceNotation(square + i * direction);
                }
                if (piece.equals("Q") || piece.equals("R")) {
                    checkFrom = square + i * direction;
                    System.out.println("Potential Check: " + checkFrom);
                    potentialChecks = Usefull.AddToIntArray(checkFrom, potentialChecks);
                    check = true;
                }
            }
            if (direction > 0) {
                direction *= -1;
            }else{
                break;
            }
        }
        return check;
    }
    
    static boolean DiagonalCheck(int square){
        boolean check = false;
        int checkFrom = -1;
        int[] diagonals = new int[]{7, -7, 9, -9};
        for (int i = 0; i < diagonals.length; i++) {
            for (int j = diagonals[i]; square + j >= 0 && square + j <= 63; j += diagonals[i]) {
                if ((Math.abs((square + j - diagonals[i]) / 8) -  (square + j) / 8) == 2) {
                    break;
                }
                String piece = Usefull.GetSquaresPieceNotation(square + j);
                if (piece.equals("B") || piece.equals("Q")) {
                    checkFrom = square + j;
                    System.out.println("Potential Check: " + checkFrom);
                    potentialChecks = Usefull.AddToIntArray(checkFrom, potentialChecks);
                    check = true;
                }
                if (piece.equals("P")) {
                    if (Math.abs(j) == 7 || Math.abs(j) == 9 ) {
                        checkFrom = square + j;
                        System.out.println("Potential Check: " + checkFrom);
                        potentialChecks = Usefull.AddToIntArray(checkFrom, potentialChecks);
                        check = true;
                    }
                }
            }
        }
        return check;
    }

    static boolean LMovementCheck(int square) {
        int direction = 1;
        boolean check = false;
        int[] knightMovement = new int[]{6, 10, 15, 17};
        while (true) {
            for (int i = 0; i < knightMovement.length; i++) {
                if (square + knightMovement[i] * direction < 0 || square + knightMovement[i] * direction > 63) {
                    continue;
                }
                int checkFrom = square + (knightMovement[i] * direction);
                if (Usefull.GetSquaresPieceNotation(checkFrom).equals("N")) {
                    System.out.println("Potential Check: " + checkFrom);
                    potentialChecks = Usefull.AddToIntArray(checkFrom, potentialChecks);
                    check = true;
                }
            }
            if (direction == 1) {
                direction *= -1;
            }else {break;}
        }
        return check;
    }

}
